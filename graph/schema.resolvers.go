package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/gocql/gocql"
	"github.com/yaninyzwitty/gqlgen-subscriptions-go/graph/model"
	"github.com/yaninyzwitty/gqlgen-subscriptions-go/helpers"
	"github.com/yaninyzwitty/gqlgen-subscriptions-go/sonyflake"
)

// Sender is the resolver for the sender field.
func (r *messageResolver) Sender(ctx context.Context, obj *model.Message) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Sender - sender"))
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, roomID string, senderID string, content string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: SendMessage - sendMessage"))
}

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, name string, participants []string) (*model.Room, error) {
	panic(fmt.Errorf("not implemented: CreateRoom - createRoom"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	if name == "" {
		return nil, fmt.Errorf("name cannot be empty")
	}
	if email == "" {
		return nil, fmt.Errorf("email cannot be empty")
	}
	// Generate the next ID using Sonyflake
	nextID, err := sonyflake.GenerateID()
	if err != nil {
		return nil, fmt.Errorf("failed to generate next ID: %w", err)
	}

	// Construct the payload as a JSON string
	payload, err := json.Marshal(map[string]interface{}{
		"id":    nextID,
		"name":  name,
		"email": email,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to marshal payload: %w", err)
	}

	// Generate a TimeUUID for the event
	eventID := gocql.TimeUUID()

	// CQL batch statement for inserting into users and users_outbox
	insertToTablesBatch := `
		BEGIN BATCH
		INSERT INTO products_keyspace.users (id, name, email) VALUES (?, ?, ?);
		INSERT INTO products_keyspace.users_outbox (
			published, 
			user_id, 
			event_id, 
			event_type, 
			payload, 
			created_at
		) VALUES (
			false, 
			?, 
			?, 
			?, 
			?, 
			toTimestamp(now())
		);
		APPLY BATCH;
	`

	// Execute the batch statement
	err = r.Session.Query(
		insertToTablesBatch,
		nextID, name, email, // For the `users` table
		nextID, eventID, "user_created", string(payload), // For the `users_outbox` table
	).Exec()

	if err != nil {
		return nil, fmt.Errorf("failed to execute batch query: %w", err)
	}

	// Return the created user object
	return &model.User{
		ID:    helpers.UintToString(nextID),
		Name:  name,
		Email: email,
	}, nil
}

// GetMessages is the resolver for the getMessages field.
func (r *queryResolver) GetMessages(ctx context.Context, roomID string, limit *int32, offset *int32) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessages - getMessages"))
}

// GetRoom is the resolver for the getRoom field.
func (r *queryResolver) GetRoom(ctx context.Context, roomID string) (*model.Room, error) {
	panic(fmt.Errorf("not implemented: GetRoom - getRoom"))
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID string) (*model.User, error) {
	userIDInt, err := strconv.ParseUint(userID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse userID: %w", err)
	}

	query := `SELECT id, name, email FROM products_keyspace.users WHERE id = ?`
	var user model.User

	err = r.Session.Query(query, userIDInt).Scan(&user.ID, &user.Name, &user.Email)
	if err != nil {
		return nil, fmt.Errorf("failed to query user: %w", err)
	}
	return &user, nil

}

// Participants is the resolver for the participants field.
func (r *roomResolver) Participants(ctx context.Context, obj *model.Room) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Participants - participants"))
}

// Messages is the resolver for the messages field.
func (r *roomResolver) Messages(ctx context.Context, obj *model.Room) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: Messages - messages"))
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, roomID string) (<-chan *model.Message, error) {
	panic(fmt.Errorf("not implemented: GetUser - getUser"))
}

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Room returns RoomResolver implementation.
func (r *Resolver) Room() RoomResolver { return &roomResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type messageResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
