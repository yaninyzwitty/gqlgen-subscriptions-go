package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"encoding/json"
	"fmt"
	"log/slog"
	"strconv"
	"time"

	"github.com/gocql/gocql"
	"github.com/yaninyzwitty/gqlgen-subscriptions-go/graph/model"
	"github.com/yaninyzwitty/gqlgen-subscriptions-go/helpers"
	"github.com/yaninyzwitty/gqlgen-subscriptions-go/sonyflake"
)

// Sender is the resolver for the sender field.
func (r *messageResolver) Sender(ctx context.Context, obj *model.Message) (*model.User, error) {
	// Parse the Sender ID from the message object
	parsedUserID, err := strconv.ParseUint(obj.Sender.ID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse user ID: %w", err)
	}

	// Query to fetch user details from the 'users' table
	query := `SELECT id, name, email FROM products_keyspace.users WHERE id = ?`

	// Execute the query and iterate over the result
	var user model.User
	err = r.Session.Query(query, parsedUserID).Scan(&user.ID, &user.Name, &user.Email)
	if err != nil {
		if err == gocql.ErrNotFound {
			// Handle case where the user doesn't exist in the database
			return nil, fmt.Errorf("user not found: %w", err)
		}
		return nil, fmt.Errorf("failed to execute query: %w", err)
	}

	// Return the populated user model
	return &user, nil
}

// SendMessage is the resolver for the sendMessage field.
func (r *mutationResolver) SendMessage(ctx context.Context, roomID string, senderID string, content string) (*model.Message, error) {
	if roomID == "" || senderID == "" || content == "" {
		return nil, fmt.Errorf("roomID, senderID, and content are required")
	}

	// Parse roomID and senderID as uint64
	parsedRoomID, err := strconv.ParseUint(roomID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse room ID: %w", err)
	}

	parsedSenderID, err := strconv.ParseUint(senderID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse sender ID: %w", err)
	}

	// Generate chat ID using Sonyflake
	chatID, err := sonyflake.GenerateID()
	if err != nil {
		return nil, fmt.Errorf("failed to generate chat ID: %w", err)
	}

	// Get the current timestamp
	now := time.Now()

	// Generate an event ID using TimeUUID
	eventID := gocql.TimeUUID()

	// Prepare the payload for the outbox
	payload, err := json.Marshal(map[string]interface{}{
		"room_id":   roomID,
		"chat_id":   chatID,
		"sender_id": senderID,
		"text":      content,
		"timestamp": now,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to marshal payload: %w", err)
	}

	// Define the CQL batch query
	insertToTablesBatch := `
	BEGIN BATCH
	INSERT INTO products_keyspace.message_by_room (
		room_id, 
		chat_id, 
		sender_id, 
		text, 
		timestamp
	) VALUES (?, ?, ?, ?, ?);

	INSERT INTO products_keyspace.message_by_room_outbox (
		room_id, 
		published, 
		event_id, 
		chat_id, 
		event_type, 
		payload, 
		created_at
	) VALUES (
		?, 
		false, 
		?, 
		?, 
		?, 
		?, 
		?
	);
	APPLY BATCH;
	`

	// Execute the batch query
	err = r.Session.Query(insertToTablesBatch,
		parsedRoomID, chatID, parsedSenderID, content, now, // message_by_room
		parsedRoomID, eventID, chatID, "MESSAGE_SENT", string(payload), now, // message_by_room_outbox
	).Exec()
	if err != nil {
		return nil, fmt.Errorf("failed to execute batch query: %w", err)
	}

	// Return the created message as the response
	return &model.Message{
		ID:     helpers.UintToString(chatID),
		RoomID: helpers.UintToString(parsedRoomID),
		Sender: &model.User{
			ID: helpers.UintToString(parsedSenderID),
		},
		Content:   content,
		Timestamp: now.String(), // If you want to return it as a string
	}, nil
}

// CreateRoom is the resolver for the createRoom field.
func (r *mutationResolver) CreateRoom(ctx context.Context, name string, participants []string) (*model.Room, error) {
	// Validate inputs
	if name == "" || len(participants) == 0 {
		return nil, fmt.Errorf("name and participants cannot be empty")
	}

	// Generate a unique room ID using Sonyflake
	roomID, err := sonyflake.GenerateID()
	if err != nil {
		return nil, fmt.Errorf("failed to generate room ID: %w", err)
	}

	now := time.Now()

	// Parse participant IDs
	var participantsID []uint64
	for _, participantID := range participants {
		parsedID, err := strconv.ParseUint(participantID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("failed to parse participant ID: %w", err)
		}
		participantsID = append(participantsID, parsedID)
	}

	var users []*model.User

	for _, participantid := range participantsID {
		users = append(users, &model.User{
			ID: helpers.UintToString(participantid),
		})
	}

	// Prepare payload for the outbox table
	payload, err := json.Marshal(map[string]interface{}{
		"id":           roomID,
		"name":         name,
		"created_at":   now,
		"participants": participantsID,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to marshal payload: %w", err)
	}

	// Generate a unique event ID for the outbox table
	eventID := gocql.TimeUUID()

	// Define CQL batch query for inserting data into tables
	insertToTablesBatch := `
	BEGIN BATCH
	INSERT INTO products_keyspace.chat_rooms (id, name, created_at, participants) VALUES (?, ?, ?, ?);
	INSERT INTO products_keyspace.chat_rooms_outbox (
		published, 
		room_id, 
		event_id, 
		event_type, 
		payload, 
		created_at
	) VALUES (
		false, 
		?, 
		?, 
		?, 
		?, 
		?
	);
	APPLY BATCH;
	`

	// Execute batch query
	if err := r.Session.Query(
		insertToTablesBatch,
		roomID, name, now, participantsID, // Chat room table
		roomID, eventID, "chat_room_created", string(payload), now, // Outbox table
	).Exec(); err != nil {
		return nil, fmt.Errorf("failed to create chat room: %w", err)
	}

	// Return the created room
	return &model.Room{
		ID:           helpers.UintToString(roomID),
		Name:         name,
		CreatedAt:    now.String(),
		Participants: users,
	}, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*model.User, error) {
	if name == "" {
		return nil, fmt.Errorf("name cannot be empty")
	}
	if email == "" {
		return nil, fmt.Errorf("email cannot be empty")
	}
	// Generate the next ID using Sonyflake
	nextID, err := sonyflake.GenerateID()
	if err != nil {
		return nil, fmt.Errorf("failed to generate next ID: %w", err)
	}

	// Construct the payload as a JSON string
	payload, err := json.Marshal(map[string]interface{}{
		"id":    nextID,
		"name":  name,
		"email": email,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to marshal payload: %w", err)
	}

	// Generate a TimeUUID for the event
	eventID := gocql.TimeUUID()

	// CQL batch statement for inserting into users and users_outbox
	insertToTablesBatch := `
		BEGIN BATCH
		INSERT INTO products_keyspace.users (id, name, email) VALUES (?, ?, ?);
		INSERT INTO products_keyspace.users_outbox (
			published, 
			user_id, 
			event_id, 
			event_type, 
			payload, 
			created_at
		) VALUES (
			false, 
			?, 
			?, 
			?, 
			?, 
			toTimestamp(now())
		);
		APPLY BATCH;
	`

	// Execute the batch statement
	err = r.Session.Query(
		insertToTablesBatch,
		nextID, name, email, // For the `users` table
		nextID, eventID, "user_created", string(payload), // For the `users_outbox` table
	).Exec()

	if err != nil {
		return nil, fmt.Errorf("failed to execute batch query: %w", err)
	}

	// Return the created user object
	return &model.User{
		ID:    helpers.UintToString(nextID),
		Name:  name,
		Email: email,
	}, nil
}

// GetMessages is the resolver for the getMessages field.
func (r *queryResolver) GetMessages(ctx context.Context, roomID string, limit *int32, offset *int32) ([]*model.Message, error) {
	panic(fmt.Errorf("not implemented: GetMessages - getMessages"))
}

// GetRoom is the resolver for the getRoom field.
func (r *queryResolver) GetRoom(ctx context.Context, roomID string) (*model.Room, error) {
	parsedRoomID, err := strconv.ParseUint(roomID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse room ID: %w", err)

	}

	queryRoomStmt := `SELECT id, name, created_at, participants FROM products_keyspace.chat_rooms where id = ?`

	var room model.Room
	var participantsInRoom []uint64
	var createdAt time.Time
	var parsedRoomUintID uint64

	err = r.Session.Query(queryRoomStmt, parsedRoomID).Scan(&parsedRoomUintID, &room.Name, &createdAt, &participantsInRoom)
	if err != nil {
		return nil, fmt.Errorf("failed to create room: %w", err)
	}

	var users []*model.User

	for _, participant := range participantsInRoom {
		userId := helpers.UintToString(participant)
		users = append(users, &model.User{
			ID: userId,
		})

	}

	return &model.Room{
		ID:           helpers.UintToString(parsedRoomUintID),
		Name:         room.Name,
		CreatedAt:    createdAt.String(),
		Participants: users,
	}, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, userID string) (*model.User, error) {
	userIDInt, err := strconv.ParseUint(userID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("failed to parse userID: %w", err)
	}

	query := `SELECT id, name, email FROM products_keyspace.users WHERE id = ?`
	var user model.User

	err = r.Session.Query(query, userIDInt).Scan(&user.ID, &user.Name, &user.Email)
	if err != nil {
		return nil, fmt.Errorf("failed to query user: %w", err)
	}
	return &user, nil

}

// Participants is the resolver for the participants field.
func (r *roomResolver) Participants(ctx context.Context, obj *model.Room) ([]*model.User, error) {

	if obj == nil {
		return nil, fmt.Errorf("room is nil")
	}

	if len(obj.Participants) == 0 {
		return nil, fmt.Errorf("no participants in the room")
	}

	// Parse participant IDs from Room
	var participantsID []uint64
	for _, participant := range obj.Participants {
		parsedID, err := strconv.ParseUint(participant.ID, 10, 64)
		if err != nil {
			return nil, fmt.Errorf("failed to parse participant ID: %w", err)
		}
		participantsID = append(participantsID, parsedID)
	}

	// If no participant IDs, return early
	if len(participantsID) == 0 {
		return nil, fmt.Errorf("no valid participant IDs found in the room")
	}

	// Fetch participants using a single query with IN clause
	query := "SELECT id, name, email FROM products_keyspace.users WHERE id IN ?"
	iter := r.Session.Query(query, participantsID).Iter()

	var participants []*model.User
	var userID uint64
	var name, email string

	// Scan rows and construct User objects
	for iter.Scan(&userID, &name, &email) {
		participants = append(participants, &model.User{
			ID:    helpers.UintToString(userID), // Convert uint64 to string
			Name:  name,
			Email: email,
		})
	}

	// Check for iteration errors
	if err := iter.Close(); err != nil {
		return nil, fmt.Errorf("failed to fetch participants: %w", err)
	}

	return participants, nil
}

// Messages is the resolver for the messages field.
func (r *roomResolver) Messages(ctx context.Context, obj *model.Room) ([]*model.Message, error) {
	if obj == nil {
		return nil, fmt.Errorf("room is nil ")
	}

	selectMessagesQuery := `
	SELECT chat_id, sender_id, text, timestamp
	FROM products_keyspace.message_by_room
	WHERE room_id = ?
	ORDER BY chat_id DESC;
`

	iter := r.Session.Query(selectMessagesQuery, obj.ID).Iter()
	var messages []*model.Message
	var chatID, senderID uint64
	var text string
	var timestamp time.Time
	for iter.Scan(&chatID, &senderID, &text, &timestamp) {
		messages = append(messages, &model.Message{
			ID:        helpers.UintToString(chatID),
			Sender:    &model.User{ID: helpers.UintToString(senderID)},
			Timestamp: timestamp.String(),
			RoomID:    obj.ID,
			Content:   text,
		})
	}

	return messages, nil

}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, roomID string) (<-chan *model.Message, error) {
	messages := make(chan *model.Message, 100) // Buffered channel

	go func() {
		defer close(messages) // Close the channel when the goroutine ends
		slog.Info("Kafka consumer started for room", "roomID", roomID)

		for {
			select {
			case <-ctx.Done():
				slog.Info("Context canceled for room", "roomID", roomID)
				// Gracefully handle context cancellation
				return
			default:
				// Read the next message from Kafka
				msg, err := r.Reader.ReadMessage(ctx)
				if err != nil {
					slog.Error("Error reading message from Kafka", "error", err, "roomID", roomID)
					continue
				}

				// Define a struct for unmarshaling the Kafka message
				var otherMessage model.OtherMessage

				// Unmarshal the Kafka message into the struct
				if err := json.Unmarshal(msg.Value, &otherMessage); err != nil {
					slog.Error("Failed to unmarshal message into struct", "error", err, "message_value", string(msg.Value))
					continue
				}

				// Map the unmarshaled data to the GraphQL model.Message
				message := &model.Message{
					ID:        fmt.Sprintf("%v", otherMessage.ID), // Ensure ID is formatted correctly
					RoomID:    otherMessage.RoomID,
					Content:   otherMessage.Content,
					Sender:    &model.User{ID: otherMessage.Sender},
					Timestamp: otherMessage.Timestamp,
				}

				// Send the message to the subscription channel
				select {
				case messages <- message:
					// Successfully sent the message
				case <-ctx.Done():
					slog.Info("Context canceled while sending message to channel", "roomID", roomID)
					return
				}
			}
		}
	}()

	return messages, nil
}

// Message returns MessageResolver implementation.
func (r *Resolver) Message() MessageResolver { return &messageResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Room returns RoomResolver implementation.
func (r *Resolver) Room() RoomResolver { return &roomResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type messageResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type roomResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// 227096649263017985, 227096896995389441, 227096919644631041, 227096959675068417, 227096998044561409

// 227097305671593985, 227097351943155713,
// 227097351943155713, 227097455425024001, 227097552397332481
