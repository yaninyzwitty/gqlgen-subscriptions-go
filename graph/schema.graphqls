type Query {
  getMessages(roomId: ID!, limit: Int, offset: Int): [Message!]!
  getRoom(roomId: ID!): Room!
  getUser(userId: ID!): User!
}

type Mutation {
  sendMessage(roomId: ID!, senderId: ID!, content: String!): Message!
  createRoom(name: String!, participants: [ID!]!): Room!
  createUser(name: String!, email: String!): User!
}

type Subscription {
  messageAdded(roomId: ID!): Message!
}

type Message {
  id: ID! # Matches 'chat_id' in the DB
  roomId: ID! # Matches 'room_id' in the DB
  sender: User! # 'sender_id' corresponds to the ID in the 'users' table
  content: String! # Matches 'text' in the DB
  timestamp: String!
}

type Room {
  id: ID! # Matches 'id' in 'chat_rooms'
  name: String! # Matches 'name' in 'chat_rooms'
  participants: [User!]! # Matches 'participants' in 'chat_rooms'
  createdAt: String! # Matches 'created_at' in 'chat_rooms'
  messages: [Message!]! # Will fetch from 'message_by_room'
}

type User {
  id: ID! # Matches 'id' in the 'users' table
  name: String! # Matches 'name' in the 'users' table
  email: String! # Matches 'email' in the 'users' table
}
